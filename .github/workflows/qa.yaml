name: QA
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

jobs:
  quality:
    name: Code quality and mod files up to date
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y libpam-dev libglib2.0-dev gcc
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Get version of golanci-lint to use
        id: cilint-version-fetch
        # This handles "require foo version" and "require (\nfoo version\n)"" formats
        run: echo "version=$(grep golangci-lint tools/go.mod | rev | cut -f1 -d' ' | rev)" >> $GITHUB_OUTPUT
      - name: Code formatting, vet, static checker Securityâ€¦
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ steps.cilint-version-fetch.outputs.version }}
          args: "--config .golangci-ci.yaml"
      - name: Module files are up to date
        run: |
          set -eu

          go mod tidy
          MODIFIED=`git status --porcelain go.sum go.mod`
          if [ -n "$MODIFIED" ]; then
              echo "ERROR: go module files aren't up to date:"
              git --no-pager diff go.mod go.sum
              exit 1
          fi
        if: ${{ always() }}
      - name: Building PAM
        run: |
          # Build PAM library
          go build -ldflags='-s -w' -buildmode=c-shared -o pam_aad.so ./pam
        if: ${{ always() }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - name: Install dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y gcc libpam-dev curl gettext libsqlite3-dev
      - name: Install cargo (nightly to get coverage)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: llvm-tools-preview
      - name: Install grcov
        run: cargo install grcov
      - name: Run tests
        run: |
          set -eu
          go test -coverpkg=./... -coverprofile=/tmp/coverage.out -covermode=set ./...

          # Filter out test utilities
          grep -hv -e "testutils" /tmp/coverage.out > /tmp/coverage.filtered.out
      - name: Run tests (with race detector)
        run: go test -race ./...
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: /tmp/coverage.filtered.out
